-- ================================
-- Modificaciones a la tabla tareas
-- Agregar campos para código base y resultado esperado
-- ================================

-- Agregar columnas para código base y resultado esperado a la tabla tareas
ALTER TABLE tareas 
ADD COLUMN codigo_base TEXT COMMENT 'Código base/plantilla para el ejercicio',
ADD COLUMN resultado_esperado TEXT COMMENT 'Resultado esperado que debe mostrar el código al ejecutarse';

-- Verificar que las columnas se agregaron correctamente
DESCRIBE tareas;

-- ================================================================
-- MODIFICACIONES PARA EJERCICIOS EXISTENTES
-- Agregar código base y resultado esperado con temática espacial
-- ================================================================

-- ================================================================
-- VARIABLES Y TIPOS
-- ================================================================

-- Variables y Tipos - Fácil
UPDATE tareas 
SET 
    descripcion = '🚀 **Misión: Configuración de Nave Espacial**\n\nComo nuevo cadete de AstroCode, tu primera misión es configurar los sistemas básicos de tu nave espacial. Debes declarar una variable para almacenar la edad del comandante.\n\n**Contexto de la misión:**\nEstás a bordo de la estación espacial AstroCode-1, preparándote para tu primer viaje intergaláctico. El sistema de navegación requiere que registres la edad del comandante para calcular los parámetros de vuelo.\n\n**Objetivos:**\n- Declara una variable llamada "edad" de tipo entero\n- Asígnale el valor 25\n- Imprime su valor en la consola con un mensaje espacial\n\n¡Completa esta configuración para poder despegar hacia las estrellas! 🌟',
    codigo_base = 'console.log("🚀 === REGISTRO DE COMANDANTE ESPACIAL ===");\n\n// TODO: Declara la variable edad y asígnale el valor 25\n\n// TODO: Imprime el valor con un mensaje\nconsole.log(`Edad del comandante: ${edad} años terrestres`);\nconsole.log("✅ Comandante registrado - Listo para el despegue!");',
    resultado_esperado = '🚀 === REGISTRO DE COMANDANTE ESPACIAL ===\nEdad del comandante: 25 años terrestres\n✅ Comandante registrado - Listo para el despegue!'
WHERE categoria_id = (SELECT id FROM categorias WHERE nombre = 'Variables y Tipos') AND nivel_id = (SELECT id FROM niveles WHERE nombre = 'Fácil');

-- Variables y Tipos - Intermedio
UPDATE tareas 
SET 
    descripcion = '🛰️ **Misión: Sistema de Telemetría Avanzada**\n\nComo ingeniero de sistemas de la estación AstroCode, debes crear un programa de telemetría que maneje diferentes tipos de datos de la nave y realice conversiones entre ellos.\n\n**Contexto de la misión:**\nLos sensores de la nave envían datos en diferentes formatos. Tu sistema debe procesar y convertir estos datos para que sean compatibles con el ordenador central.\n\n**Objetivos:**\n- Declara variables de diferentes tipos (entero, flotante, string, booleano)\n- Realiza conversiones entre tipos\n- Muestra los resultados de cada conversión\n\n**Datos de sensores:**\n- Velocidad: "2500" (string) → convertir a número\n- Temperatura: 98.6 (float) → convertir a entero\n- Coordenada X: 42 (int) → convertir a string\n- Sistema activo: 1 (int) → convertir a booleano\n\n🌌 ¡La precisión de los datos es crucial para la navegación!',
    codigo_base = 'console.log("🛰️ === SISTEMA DE TELEMETRÍA ESPACIAL ===");\n\n// Datos de sensores\nlet velocidadStr = "2500";\nlet temperatura = 98.6;\nlet coordenadaX = 42;\nlet sistemaActivo = 1;\n\nconsole.log("📡 Datos originales:");\nconsole.log(`Velocidad (string): ${velocidadStr}`);\nconsole.log(`Temperatura (float): ${temperatura}`);\nconsole.log(`Coordenada X (int): ${coordenadaX}`);\nconsole.log(`Sistema activo (int): ${sistemaActivo}`);\n\n// TODO: Realizar conversiones\nlet velocidadNum = // Convertir velocidadStr a número\nlet temperaturaInt = // Convertir temperatura a entero\nlet coordenadaStr = // Convertir coordenadaX a string\nlet sistemaBoolean = // Convertir sistemaActivo a booleano\n\nconsole.log("\n🔄 Datos convertidos:");\nconsole.log(`Velocidad (number): ${velocidadNum} km/h`);\nconsole.log(`Temperatura (int): ${temperaturaInt}°C`);\nconsole.log(`Coordenada X (string): "${coordenadaStr}"`);\nconsole.log(`Sistema activo (boolean): ${sistemaBoolean}`);\nconsole.log("\n✅ Telemetría procesada correctamente!");',
    resultado_esperado = '🛰️ === SISTEMA DE TELEMETRÍA ESPACIAL ===\n📡 Datos originales:\nVelocidad (string): 2500\nTemperatura (float): 98.6\nCoordenada X (int): 42\nSistema activo (int): 1\n\n🔄 Datos convertidos:\nVelocidad (number): 2500 km/h\nTemperatura (int): 98°C\nCoordenada X (string): "42"\nSistema activo (boolean): true\n\n✅ Telemetría procesada correctamente!'
WHERE categoria_id = (SELECT id FROM categorias WHERE nombre = 'Variables y Tipos') AND nivel_id = (SELECT id FROM niveles WHERE nombre = 'Intermedio');

-- ================================================================
-- OPERADORES
-- ================================================================

-- Operadores - Fácil
UPDATE tareas 
SET 
    descripcion = '🧮 **Misión: Calculadora de Combustible Espacial**\n\nComo técnico de combustible en la estación AstroCode, debes crear un programa que calcule el consumo de combustible para diferentes maniobras espaciales.\n\n**Contexto de la misión:**\nLa nave necesita realizar cálculos precisos de combustible antes de cada maniobra. Tu calculadora debe usar operadores aritméticos para determinar el combustible necesario.\n\n**Objetivos:**\n- Usa operadores aritméticos (+, -, *, /, %) \n- Calcula combustible para aceleración, frenado y maniobras\n- Muestra los resultados de cada operación\n\n**Datos de entrada:**\n- Combustible inicial: 1000 litros\n- Consumo por aceleración: 150 litros\n- Consumo por frenado: 75 litros\n\n⛽ ¡Cada gota de combustible cuenta en el espacio!',
    codigo_base = 'console.log("🧮 === CALCULADORA DE COMBUSTIBLE ESPACIAL ===");\n\n// Datos iniciales\nlet combustibleInicial = 1000;\nlet consumoAceleracion = 150;\nlet consumoFrenado = 75;\nlet numeroManiobras = 3;\n\nconsole.log(`⛽ Combustible inicial: ${combustibleInicial} litros`);\nconsole.log(`🚀 Consumo por aceleración: ${consumoAceleracion} litros`);\nconsole.log(`🛑 Consumo por frenado: ${consumoFrenado} litros`);\nconsole.log(`🔄 Número de maniobras: ${numeroManiobras}`);\n\n// TODO: Realizar cálculos con operadores aritméticos\nlet consumoTotal = // Suma de aceleración y frenado\nlet consumoPorManiobra = // Consumo total multiplicado por número de maniobras\nlet combustibleRestante = // Combustible inicial menos consumo total\nlet porcentajeRestante = // Porcentaje de combustible restante\nlet combustibleExtra = // Combustible restante módulo 100\n\nconsole.log("\n📊 Resultados de cálculos:");\nconsole.log(`Consumo por maniobra: ${consumoTotal} litros`);\nconsole.log(`Consumo total misión: ${consumoPorManiobra} litros`);\nconsole.log(`Combustible restante: ${combustibleRestante} litros`);\nconsole.log(`Porcentaje restante: ${porcentajeRestante.toFixed(1)}%`);\nconsole.log(`Combustible extra: ${combustibleExtra} litros`);',
    resultado_esperado = '🧮 === CALCULADORA DE COMBUSTIBLE ESPACIAL ===\n⛽ Combustible inicial: 1000 litros\n🚀 Consumo por aceleración: 150 litros\n🛑 Consumo por frenado: 75 litros\n🔄 Número de maniobras: 3\n\n📊 Resultados de cálculos:\nConsumo por maniobra: 225 litros\nConsumo total misión: 675 litros\nCombustible restante: 325 litros\nPorcentaje restante: 32.5%\nCombustible extra: 25 litros'
WHERE categoria_id = (SELECT id FROM categorias WHERE nombre = 'Operadores') AND nivel_id = (SELECT id FROM niveles WHERE nombre = 'Fácil');

-- ================================================================
-- ESTRUCTURAS CONDICIONALES
-- ================================================================

-- Estructuras Condicionales - Fácil
UPDATE tareas 
SET 
    descripcion = '🌡️ **Misión: Monitor de Temperatura Espacial**\n\nComo especialista en sistemas ambientales de AstroCode, debes crear un programa que monitoree la temperatura de la nave y determine si está en rangos seguros.\n\n**Contexto de la misión:**\nLa temperatura en el espacio puede ser extrema. Tu sistema debe analizar las lecturas de temperatura y clasificarlas para mantener la seguridad de la tripulación.\n\n**Objetivos:**\n- Determina si una temperatura es positiva, negativa o cero\n- Usa estructuras if-else para la clasificación\n- Proporciona mensajes de estado apropiados\n\n**Rangos de temperatura:**\n- Positiva: Zona habitable\n- Cero: Punto de congelación\n- Negativa: Zona peligrosa\n\n🌡️ ¡La vida de la tripulación depende de estos sistemas!',
    codigo_base = 'console.log("🌡️ === MONITOR DE TEMPERATURA ESPACIAL ===");\n\n// Lectura de temperatura del sensor\nlet temperatura = -15; // Puedes cambiar este valor para probar\n\nconsole.log(`📊 Temperatura detectada: ${temperatura}°C`);\n\n// TODO: Implementar estructuras condicionales\nif (/* condición para temperatura positiva */) {\n    console.log("✅ Estado: ZONA HABITABLE");\n    console.log("🟢 Temperatura segura para la tripulación");\n} else if (/* condición para temperatura cero */) {\n    console.log("⚠️ Estado: PUNTO DE CONGELACIÓN");\n    console.log("🟡 Activar sistemas de calefacción");\n} else {\n    console.log("❌ Estado: ZONA PELIGROSA");\n    console.log("🔴 ALERTA: Temperatura crítica detectada");\n}\n\nconsole.log("\n🛡️ Monitoreo completado");',
    resultado_esperado = '🌡️ === MONITOR DE TEMPERATURA ESPACIAL ===\n📊 Temperatura detectada: -15°C\n❌ Estado: ZONA PELIGROSA\n🔴 ALERTA: Temperatura crítica detectada\n\n🛡️ Monitoreo completado'
WHERE categoria_id = (SELECT id FROM categorias WHERE nombre = 'Estructuras Condicionales') AND nivel_id = (SELECT id FROM niveles WHERE nombre = 'Fácil');

-- ================================================================
-- BUCLES
-- ================================================================

-- Bucles - Fácil
UPDATE tareas 
SET 
    descripcion = '🔢 **Misión: Secuencia de Lanzamiento**\n\nComo controlador de lanzamiento en AstroCode, debes programar la secuencia de cuenta regresiva para el despegue de la nave espacial.\n\n**Contexto de la misión:**\nCada lanzamiento requiere una secuencia precisa de verificaciones. Tu programa debe generar la secuencia numérica y identificar los sistemas críticos (números pares).\n\n**Objetivos:**\n- Usa un bucle for para imprimir números del 1 al 10\n- Modifica el programa para mostrar solo números pares\n- Agrega mensajes de verificación de sistemas\n\n**Secuencia de verificación:**\n- Números 1-10: Verificación general\n- Números pares: Sistemas críticos\n\n🚀 ¡Cada verificación es crucial para un lanzamiento exitoso!',
    codigo_base = 'console.log("🔢 === SECUENCIA DE LANZAMIENTO ASTROCODE ===");\n\nconsole.log("\n🔍 Verificación general de sistemas:");\n// TODO: Bucle for para imprimir números del 1 al 10\nfor (let i = 1; i <= 10; i++) {\n    console.log(`Sistema ${i}: ✅ Verificado`);\n}\n\nconsole.log("\n🎯 Verificación de sistemas críticos (números pares):");\n// TODO: Bucle for para imprimir solo números pares\nfor (let i = 1; i <= 10; i++) {\n    if (/* condición para números pares */) {\n        console.log(`🔴 Sistema crítico ${i}: ✅ OPERATIVO`);\n    }\n}\n\nconsole.log("\n🚀 Secuencia de lanzamiento completada");\nconsole.log("✅ Todos los sistemas verificados - LISTO PARA DESPEGUE!");',
    resultado_esperado = '🔢 === SECUENCIA DE LANZAMIENTO ASTROCODE ===\n\n🔍 Verificación general de sistemas:\nSistema 1: ✅ Verificado\nSistema 2: ✅ Verificado\nSistema 3: ✅ Verificado\nSistema 4: ✅ Verificado\nSistema 5: ✅ Verificado\nSistema 6: ✅ Verificado\nSistema 7: ✅ Verificado\nSistema 8: ✅ Verificado\nSistema 9: ✅ Verificado\nSistema 10: ✅ Verificado\n\n🎯 Verificación de sistemas críticos (números pares):\n🔴 Sistema crítico 2: ✅ OPERATIVO\n🔴 Sistema crítico 4: ✅ OPERATIVO\n🔴 Sistema crítico 6: ✅ OPERATIVO\n🔴 Sistema crítico 8: ✅ OPERATIVO\n🔴 Sistema crítico 10: ✅ OPERATIVO\n\n🚀 Secuencia de lanzamiento completada\n✅ Todos los sistemas verificados - LISTO PARA DESPEGUE!'
WHERE categoria_id = (SELECT id FROM categorias WHERE nombre = 'Bucles') AND nivel_id = (SELECT id FROM niveles WHERE nombre = 'Fácil');

-- ================================================================
-- FUNCIONES
-- ================================================================

-- Funciones - Fácil
UPDATE tareas 
SET 
    descripcion = '🌍 **Misión: Calculadora de Área Planetaria**\n\nComo cartógrafo espacial de AstroCode, debes crear una función para calcular el área de planetas circulares que descubra tu nave durante la exploración.\n\n**Contexto de la misión:**\nTu nave ha descubierto un nuevo planeta con forma circular. Para determinar su habitabilidad, necesitas calcular su área superficial usando su radio.\n\n**Objetivos:**\n- Crea una función que calcule el área de un círculo\n- La función debe recibir el radio como parámetro\n- Debe retornar el área calculada\n- Usa la fórmula: π × radio²\n\n**Datos del planeta:**\n- Radio: 6371 km (similar a la Tierra)\n- π ≈ 3.14159\n\n🪐 ¡Cada nuevo mundo es una oportunidad para la humanidad!',
    codigo_base = 'console.log("🌍 === CALCULADORA DE ÁREA PLANETARIA ===");\n\n// TODO: Crear función para calcular área del círculo\nfunction calcularAreaCirculo(radio) {\n    // Implementar fórmula: π × radio²\n    const pi = 3.14159;\n    // return ...\n}\n\n// Datos del planeta descubierto\nconst radioPlaneta = 6371; // km\n\nconsole.log(`🪐 Planeta descubierto:`);\nconsole.log(`📏 Radio: ${radioPlaneta} km`);\n\n// Calcular área\nconst areaPlaneta = calcularAreaCirculo(radioPlaneta);\n\nconsole.log(`\n📊 Resultados del análisis:`);\nconsole.log(`🌍 Área superficial: ${areaPlaneta.toFixed(2)} km²`);\nconsole.log(`\n✅ Análisis planetario completado`);\nconsole.log(`🚀 Datos enviados a la base AstroCode`);',
    resultado_esperado = '🌍 === CALCULADORA DE ÁREA PLANETARIA ===\n🪐 Planeta descubierto:\n📏 Radio: 6371 km\n\n📊 Resultados del análisis:\n🌍 Área superficial: 127516118.49 km²\n\n✅ Análisis planetario completado\n🚀 Datos enviados a la base AstroCode'
WHERE categoria_id = (SELECT id FROM categorias WHERE nombre = 'Funciones') AND nivel_id = (SELECT id FROM niveles WHERE nombre = 'Fácil');

-- ================================================================
-- ARRAYS Y LISTAS
-- ================================================================

-- Arrays y Listas - Fácil
UPDATE tareas 
SET 
    descripcion = '📊 **Misión: Análisis de Datos de Sensores**\n\nComo analista de datos de la estación AstroCode, debes procesar las lecturas de 5 sensores de radiación para determinar las condiciones de seguridad del sector.\n\n**Contexto de la misión:**\nTu nave ha recopilado datos de radiación de diferentes puntos del sector. Necesitas analizar estos datos para encontrar los valores extremos y calcular el promedio para determinar si es seguro continuar.\n\n**Objetivos:**\n- Crea un array con 5 lecturas de sensores\n- Encuentra el valor mayor y menor\n- Calcula el promedio de todas las lecturas\n- Determina si el sector es seguro (promedio < 50)\n\n**Lecturas de sensores:** [23, 45, 12, 67, 34]\n**Límite de seguridad:** 50 unidades de radiación\n\n☢️ ¡La seguridad de la tripulación es prioritaria!',
    codigo_base = 'console.log("📊 === ANÁLISIS DE DATOS DE SENSORES ===");\n\n// Lecturas de los sensores de radiación\nconst lecturasSensores = [23, 45, 12, 67, 34];\nconst limitSeguridad = 50;\n\nconsole.log(`☢️ Lecturas de radiación: [${lecturasSensores.join(", ")}]`);\nconsole.log(`🛡️ Límite de seguridad: ${limitSeguridad} unidades`);\n\n// TODO: Encontrar el mayor valor\nlet mayorLectura = lecturasSensores[0];\nfor (let i = 1; i < lecturasSensores.length; i++) {\n    if (/* condición para encontrar el mayor */) {\n        mayorLectura = lecturasSensores[i];\n    }\n}\n\n// TODO: Encontrar el menor valor\nlet menorLectura = lecturasSensores[0];\nfor (let i = 1; i < lecturasSensores.length; i++) {\n    if (/* condición para encontrar el menor */) {\n        menorLectura = lecturasSensores[i];\n    }\n}\n\n// TODO: Calcular el promedio\nlet suma = 0;\nfor (let i = 0; i < lecturasSensores.length; i++) {\n    suma += lecturasSensores[i];\n}\nconst promedio = suma / lecturasSensores.length;\n\nconsole.log("\n📈 Resultados del análisis:");\nconsole.log(`📊 Lectura máxima: ${mayorLectura} unidades`);\nconsole.log(`📉 Lectura mínima: ${menorLectura} unidades`);\nconsole.log(`📊 Promedio: ${promedio.toFixed(2)} unidades`);\n\n// Evaluación de seguridad\nif (promedio < limitSeguridad) {\n    console.log("\n✅ SECTOR SEGURO - Continuar exploración");\n} else {\n    console.log("\n⚠️ SECTOR PELIGROSO - Cambiar ruta");\n}',
    resultado_esperado = '📊 === ANÁLISIS DE DATOS DE SENSORES ===\n☢️ Lecturas de radiación: [23, 45, 12, 67, 34]\n🛡️ Límite de seguridad: 50 unidades\n\n📈 Resultados del análisis:\n📊 Lectura máxima: 67 unidades\n📉 Lectura mínima: 12 unidades\n📊 Promedio: 36.20 unidades\n\n✅ SECTOR SEGURO - Continuar exploración'
WHERE categoria_id = (SELECT id FROM categorias WHERE nombre = 'Arrays y Listas') AND nivel_id = (SELECT id FROM niveles WHERE nombre = 'Fácil');

-- ================================================================
-- OBJETOS Y CLASES
-- ================================================================

-- Objetos y Clases - Fácil
UPDATE tareas 
SET 
    descripcion = '🛸 **Misión: Registro de Nave Espacial**\n\nComo administrador de flota de AstroCode, debes crear un sistema de registro para las naves espaciales usando objetos para almacenar su información.\n\n**Contexto de la misión:**\nLa flota de AstroCode está creciendo y necesitas un sistema para registrar y mostrar la información de cada nave. Cada nave tiene propiedades específicas que deben ser almacenadas.\n\n**Objetivos:**\n- Crea un objeto que represente una nave espacial\n- El objeto debe tener propiedades: nombre, tipo, tripulacion, combustible\n- Muestra la información de la nave\n- Accede a propiedades específicas del objeto\n\n**Datos de la nave:**\n- Nombre: "Estrella Polar"\n- Tipo: "Explorador"\n- Tripulación: 5\n- Combustible: 750\n\n🚀 ¡Organizar la flota es clave para el éxito de las misiones!',
    codigo_base = 'console.log("🛸 === REGISTRO DE NAVE ESPACIAL ===");\n\n// TODO: Crear objeto nave con las propiedades requeridas\nconst nave = {\n    // Agregar propiedades: nombre, tipo, tripulacion, combustible\n};\n\nconsole.log("📋 Información de la nave:");\nconsole.log(`🚀 Nombre: ${nave.nombre}`);\nconsole.log(`🔧 Tipo: ${nave.tipo}`);\nconsole.log(`👥 Tripulación: ${nave.tripulacion} personas`);\nconsole.log(`⛽ Combustible: ${nave.combustible} litros`);\n\nconsole.log("\n✅ Nave registrada en la flota AstroCode");',
    resultado_esperado = '🛸 === REGISTRO DE NAVE ESPACIAL ===\n📋 Información de la nave:\n🚀 Nombre: Estrella Polar\n🔧 Tipo: Explorador\n👥 Tripulación: 5 personas\n⛽ Combustible: 750 litros\n\n✅ Nave registrada en la flota AstroCode'
WHERE categoria_id = (SELECT id FROM categorias WHERE nombre = 'Objetos y Clases') AND nivel_id = (SELECT id FROM niveles WHERE nombre = 'Fácil');

-- ================================================================
-- ALGORITMOS DE ORDENAMIENTO
-- ================================================================

-- Algoritmos de Ordenamiento - Fácil
UPDATE tareas 
SET 
    descripcion = '📈 **Misión: Ordenamiento de Coordenadas Estelares**\n\nComo navegante espacial de AstroCode, debes ordenar las coordenadas de las estrellas detectadas para planificar la ruta de exploración más eficiente.\n\n**Contexto de la misión:**\nTu nave ha detectado varias estrellas en el sector. Para optimizar el combustible, necesitas ordenar sus coordenadas X de menor a mayor para seguir una ruta secuencial.\n\n**Objetivos:**\n- Implementa el algoritmo de ordenamiento burbuja\n- Ordena un array de coordenadas de menor a mayor\n- Muestra el array antes y después del ordenamiento\n- Cuenta el número de intercambios realizados\n\n**Coordenadas detectadas:** [64, 23, 89, 12, 45]\n\n⭐ ¡Una ruta ordenada significa menos combustible gastado!',
    codigo_base = 'console.log("📈 === ORDENAMIENTO DE COORDENADAS ESTELARES ===");\n\n// Coordenadas X de estrellas detectadas\nlet coordenadas = [64, 23, 89, 12, 45];\nlet intercambios = 0;\n\nconsole.log(`⭐ Coordenadas originales: [${coordenadas.join(", ")}]`);\n\n// TODO: Implementar algoritmo de ordenamiento burbuja\nfor (let i = 0; i < coordenadas.length - 1; i++) {\n    for (let j = 0; j < coordenadas.length - i - 1; j++) {\n        if (/* condición para intercambio */) {\n            // Intercambiar elementos\n            let temp = coordenadas[j];\n            coordenadas[j] = coordenadas[j + 1];\n            coordenadas[j + 1] = temp;\n            intercambios++;\n        }\n    }\n}\n\nconsole.log(`🔄 Coordenadas ordenadas: [${coordenadas.join(", ")}]`);\nconsole.log(`📊 Intercambios realizados: ${intercambios}`);\nconsole.log("\n✅ Ruta optimizada - Lista para navegación");',
    resultado_esperado = '📈 === ORDENAMIENTO DE COORDENADAS ESTELARES ===\n⭐ Coordenadas originales: [64, 23, 89, 12, 45]\n🔄 Coordenadas ordenadas: [12, 23, 45, 64, 89]\n📊 Intercambios realizados: 8\n\n✅ Ruta optimizada - Lista para navegación'
WHERE categoria_id = (SELECT id FROM categorias WHERE nombre = 'Algoritmos de Ordenamiento') AND nivel_id = (SELECT id FROM niveles WHERE nombre = 'Fácil');

-- ================================================================
-- RECURSIÓN
-- ================================================================

-- Recursión - Fácil
UPDATE tareas 
SET 
    descripcion = '🔢 **Misión: Cálculo de Potencia de Reactor**\n\nComo ingeniero de reactores de AstroCode, debes calcular la potencia del reactor usando recursión para determinar si puede alimentar todos los sistemas de la nave.\n\n**Contexto de la misión:**\nEl reactor de la nave genera energía exponencialmente. Necesitas calcular la potencia total usando una función recursiva que simule el proceso de generación de energía.\n\n**Objetivos:**\n- Implementa una función recursiva para calcular potencias\n- Calcula base^exponente usando solo sumas\n- Maneja el caso base (exponente = 0)\n- Muestra el proceso de cálculo\n\n**Datos del reactor:**\n- Base: 3 (unidades de energía)\n- Exponente: 4 (ciclos de amplificación)\n- Resultado esperado: 3^4 = 81\n\n⚡ ¡La recursión simula el proceso natural del reactor!',
    codigo_base = 'console.log("🔢 === CÁLCULO DE POTENCIA DE REACTOR ===");\n\n// TODO: Implementar función recursiva para calcular potencia\nfunction calcularPotencia(base, exponente) {\n    // Caso base\n    if (exponente === 0) {\n        return 1;\n    }\n    \n    // Caso recursivo\n    // return ...\n}\n\n// Datos del reactor\nconst baseEnergia = 3;\nconst ciclosAmplificacion = 4;\n\nconsole.log(`⚡ Base de energía: ${baseEnergia} unidades`);\nconsole.log(`🔄 Ciclos de amplificación: ${ciclosAmplificacion}`);\n\n// Calcular potencia\nconst potenciaTotal = calcularPotencia(baseEnergia, ciclosAmplificacion);\n\nconsole.log(`\n📊 Cálculo: ${baseEnergia}^${ciclosAmplificacion} = ${potenciaTotal}`);\nconsole.log(`🔋 Potencia total del reactor: ${potenciaTotal} unidades`);\n\nif (potenciaTotal >= 80) {\n    console.log("\n✅ REACTOR OPERATIVO - Energía suficiente");\n} else {\n    console.log("\n⚠️ REACTOR INSUFICIENTE - Aumentar ciclos");\n}',
    resultado_esperado = '🔢 === CÁLCULO DE POTENCIA DE REACTOR ===\n⚡ Base de energía: 3 unidades\n🔄 Ciclos de amplificación: 4\n\n📊 Cálculo: 3^4 = 81\n🔋 Potencia total del reactor: 81 unidades\n\n✅ REACTOR OPERATIVO - Energía suficiente'
WHERE categoria_id = (SELECT id FROM categorias WHERE nombre = 'Recursión') AND nivel_id = (SELECT id FROM niveles WHERE nombre = 'Fácil');

-- ================================================================
-- ESTRUCTURAS DE DATOS
-- ================================================================

-- Estructuras de Datos - Fácil
UPDATE tareas 
SET 
    descripcion = '📚 **Misión: Sistema de Cola de Comandos**\n\nComo operador de sistemas de AstroCode, debes implementar una cola (queue) para gestionar los comandos que se envían a la nave en orden de llegada.\n\n**Contexto de la misión:**\nLa nave recibe múltiples comandos simultáneamente. Para evitar conflictos, debes procesarlos en el orden exacto en que llegaron usando una estructura de cola FIFO (First In, First Out).\n\n**Objetivos:**\n- Implementa una cola usando un array\n- Agrega comandos al final de la cola (enqueue)\n- Procesa comandos desde el inicio (dequeue)\n- Muestra el estado de la cola en cada operación\n\n**Comandos a procesar:**\n1. "ACTIVAR_ESCUDOS"\n2. "ACELERAR"\n3. "ESCANEAR_SECTOR"\n4. "COMUNICAR_BASE"\n\n📡 ¡El orden correcto evita errores críticos!',
    codigo_base = 'console.log("📚 === SISTEMA DE COLA DE COMANDOS ===");\n\n// Implementación de cola usando array\nlet colaComandos = [];\n\n// Función para agregar comando (enqueue)\nfunction agregarComando(comando) {\n    colaComandos.push(comando);\n    console.log(`➕ Comando agregado: ${comando}`);\n    console.log(`📋 Cola actual: [${colaComandos.join(", ")}]`);\n}\n\n// Función para procesar comando (dequeue)\nfunction procesarComando() {\n    if (colaComandos.length > 0) {\n        const comando = colaComandos.shift();\n        console.log(`⚡ Procesando: ${comando}`);\n        console.log(`📋 Cola restante: [${colaComandos.join(", ")}]`);\n        return comando;\n    } else {\n        console.log("⚠️ No hay comandos en cola");\n        return null;\n    }\n}\n\nconsole.log("\n🔄 Agregando comandos a la cola:");\n// TODO: Agregar los comandos usando la función\nagregarComando("ACTIVAR_ESCUDOS");\nagregarComando("ACELERAR");\nagregarComando("ESCANEAR_SECTOR");\nagregarComando("COMUNICAR_BASE");\n\nconsole.log("\n⚡ Procesando comandos:");\n// TODO: Procesar todos los comandos\nwhile (colaComandos.length > 0) {\n    procesarComando();\n}\n\nconsole.log("\n✅ Todos los comandos procesados");',
    resultado_esperado = '📚 === SISTEMA DE COLA DE COMANDOS ===\n\n🔄 Agregando comandos a la cola:\n➕ Comando agregado: ACTIVAR_ESCUDOS\n📋 Cola actual: [ACTIVAR_ESCUDOS]\n➕ Comando agregado: ACELERAR\n📋 Cola actual: [ACTIVAR_ESCUDOS, ACELERAR]\n➕ Comando agregado: ESCANEAR_SECTOR\n📋 Cola actual: [ACTIVAR_ESCUDOS, ACELERAR, ESCANEAR_SECTOR]\n➕ Comando agregado: COMUNICAR_BASE\n📋 Cola actual: [ACTIVAR_ESCUDOS, ACELERAR, ESCANEAR_SECTOR, COMUNICAR_BASE]\n\n⚡ Procesando comandos:\n⚡ Procesando: ACTIVAR_ESCUDOS\n📋 Cola restante: [ACELERAR, ESCANEAR_SECTOR, COMUNICAR_BASE]\n⚡ Procesando: ACELERAR\n📋 Cola restante: [ESCANEAR_SECTOR, COMUNICAR_BASE]\n⚡ Procesando: ESCANEAR_SECTOR\n📋 Cola restante: [COMUNICAR_BASE]\n⚡ Procesando: COMUNICAR_BASE\n📋 Cola restante: []\n\n✅ Todos los comandos procesados'
WHERE categoria_id = (SELECT id FROM categorias WHERE nombre = 'Estructuras de Datos') AND nivel_id = (SELECT id FROM niveles WHERE nombre = 'Fácil');

-- ================================================================
-- EJERCICIOS NIVEL INTERMEDIO
-- ================================================================

-- Variables y Tipos - Intermedio (ya agregado arriba)

-- Operadores - Intermedio
UPDATE tareas 
SET 
    descripcion = '🧮 **Misión: Calculadora de Navegación Avanzada**\n\nComo ingeniero de sistemas de AstroCode, debes crear una calculadora avanzada que maneje operadores lógicos y de comparación para evaluar condiciones de vuelo complejas.\n\n**Contexto de la misión:**\nLa nave necesita evaluar múltiples condiciones simultáneamente para determinar si es seguro realizar maniobras complejas. Tu calculadora debe procesar expresiones con paréntesis y operadores múltiples.\n\n**Objetivos:**\n- Implementa evaluación de expresiones con paréntesis\n- Usa operadores lógicos (&&, ||, !) y de comparación\n- Evalúa condiciones de seguridad de vuelo\n- Maneja precedencia de operadores\n\n**Condiciones a evaluar:**\n- Combustible > 500 && Escudos == true\n- (Velocidad < 1000 || Emergencia == false) && Tripulacion >= 3\n\n🚀 ¡La precisión en los cálculos puede salvar vidas!',
    codigo_base = 'console.log("🧮 === CALCULADORA DE NAVEGACIÓN AVANZADA ===");\n\n// Datos de la nave\nlet combustible = 750;\nlet escudos = true;\nlet velocidad = 850;\nlet emergencia = false;\nlet tripulacion = 4;\n\nconsole.log("📊 Estado actual de la nave:");\nconsole.log(`⛽ Combustible: ${combustible} litros`);\nconsole.log(`🛡️ Escudos: ${escudos ? "Activados" : "Desactivados"}`);\nconsole.log(`🚀 Velocidad: ${velocidad} km/h`);\nconsole.log(`🚨 Emergencia: ${emergencia ? "SÍ" : "NO"}`);\nconsole.log(`👥 Tripulación: ${tripulacion} personas`);\n\n// TODO: Evaluar condiciones de seguridad\nlet condicion1 = // combustible > 500 && escudos == true\nlet condicion2 = // (velocidad < 1000 || emergencia == false) && tripulacion >= 3\n\nconsole.log("\n🔍 Evaluación de condiciones:");\nconsole.log(`Condición 1 (Combustible y Escudos): ${condicion1 ? "✅ CUMPLE" : "❌ NO CUMPLE"}`);\nconsole.log(`Condición 2 (Velocidad y Tripulación): ${condicion2 ? "✅ CUMPLE" : "❌ NO CUMPLE"}`);\n\n// Evaluación final\nlet maniobrasSeguras = condicion1 && condicion2;\nconsole.log(`\n🎯 Resultado final: ${maniobrasSeguras ? "✅ MANIOBRAS AUTORIZADAS" : "❌ MANIOBRAS DENEGADAS"}`);',
    resultado_esperado = '🧮 === CALCULADORA DE NAVEGACIÓN AVANZADA ===\n📊 Estado actual de la nave:\n⛽ Combustible: 750 litros\n🛡️ Escudos: Activados\n🚀 Velocidad: 850 km/h\n🚨 Emergencia: NO\n👥 Tripulación: 4 personas\n\n🔍 Evaluación de condiciones:\nCondición 1 (Combustible y Escudos): ✅ CUMPLE\nCondición 2 (Velocidad y Tripulación): ✅ CUMPLE\n\n🎯 Resultado final: ✅ MANIOBRAS AUTORIZADAS'
WHERE categoria_id = (SELECT id FROM categorias WHERE nombre = 'Operadores') AND nivel_id = (SELECT id FROM niveles WHERE nombre = 'Intermedio');

-- Estructuras Condicionales - Intermedio
UPDATE tareas 
SET 
    descripcion = '🎯 **Misión: Sistema de Calificación de Planetas**\n\nComo científico planetario de AstroCode, debes crear un sistema que evalúe la habitabilidad de planetas descubiertos y les asigne una calificación basada en múltiples factores.\n\n**Contexto de la misión:**\nTu equipo ha descubierto varios exoplanetas. Necesitas un sistema automatizado que evalúe su potencial para albergar vida basándose en temperatura, atmósfera, agua y distancia a su estrella.\n\n**Objetivos:**\n- Implementa un sistema de calificación con múltiples criterios\n- Usa estructuras if-else anidadas o switch-case\n- Asigna calificaciones: A (Excelente), B (Bueno), C (Regular), D (Pobre), F (Inhabitable)\n- Proporciona recomendaciones específicas\n\n**Criterios de evaluación:**\n- Temperatura: 0-50°C (Óptima), -50-0°C o 50-100°C (Aceptable), otros (Extrema)\n- Agua: Abundante, Moderada, Escasa, Ninguna\n- Atmósfera: Respirable, Tóxica, Ninguna\n\n🌍 ¡Cada planeta evaluado nos acerca a encontrar un nuevo hogar!',
    codigo_base = 'console.log("🎯 === SISTEMA DE CALIFICACIÓN DE PLANETAS ===");\n\n// Datos del planeta a evaluar\nlet nombrePlaneta = "Kepler-442b";\nlet temperatura = 22; // °C\nlet agua = "Moderada"; // Abundante, Moderada, Escasa, Ninguna\nlet atmosfera = "Respirable"; // Respirable, Tóxica, Ninguna\nlet distanciaEstrella = 1.2; // UA (Unidades Astronómicas)\n\nconsole.log(`🪐 Evaluando planeta: ${nombrePlaneta}`);\nconsole.log(`🌡️ Temperatura: ${temperatura}°C`);\nconsole.log(`💧 Agua: ${agua}`);\nconsole.log(`🌬️ Atmósfera: ${atmosfera}`);\nconsole.log(`⭐ Distancia a estrella: ${distanciaEstrella} UA`);\n\nlet puntuacion = 0;\nlet calificacion = "";\nlet recomendacion = "";\n\n// TODO: Evaluar temperatura\nif (temperatura >= 0 && temperatura <= 50) {\n    puntuacion += 30;\n    console.log("✅ Temperatura: Óptima (+30 puntos)");\n} else if (/* condición para temperatura aceptable */) {\n    puntuacion += 15;\n    console.log("⚠️ Temperatura: Aceptable (+15 puntos)");\n} else {\n    console.log("❌ Temperatura: Extrema (+0 puntos)");\n}\n\n// TODO: Evaluar agua\nswitch (agua) {\n    case "Abundante":\n        puntuacion += 25;\n        console.log("✅ Agua: Abundante (+25 puntos)");\n        break;\n    // Agregar casos para Moderada, Escasa, Ninguna\n}\n\n// TODO: Evaluar atmósfera\n// Implementar evaluación de atmósfera\n\n// TODO: Asignar calificación final\nif (puntuacion >= 80) {\n    calificacion = "A";\n    recomendacion = "🌟 EXCELENTE - Candidato prioritario para colonización";\n} else if (/* otras condiciones */) {\n    // Implementar otras calificaciones\n}\n\nconsole.log(`\n📊 Puntuación total: ${puntuacion}/100`);\nconsole.log(`🏆 Calificación: ${calificacion}`);\nconsole.log(`💡 Recomendación: ${recomendacion}`);',
    resultado_esperado = '🎯 === SISTEMA DE CALIFICACIÓN DE PLANETAS ===\n🪐 Evaluando planeta: Kepler-442b\n🌡️ Temperatura: 22°C\n💧 Agua: Moderada\n🌬️ Atmósfera: Respirable\n⭐ Distancia a estrella: 1.2 UA\n✅ Temperatura: Óptima (+30 puntos)\n⚠️ Agua: Moderada (+15 puntos)\n✅ Atmósfera: Respirable (+35 puntos)\n\n📊 Puntuación total: 80/100\n🏆 Calificación: A\n💡 Recomendación: 🌟 EXCELENTE - Candidato prioritario para colonización'
WHERE categoria_id = (SELECT id FROM categorias WHERE nombre = 'Estructuras Condicionales') AND nivel_id = (SELECT id FROM niveles WHERE nombre = 'Intermedio');

-- Bucles - Intermedio
UPDATE tareas 
SET 
    descripcion = '🌌 **Misión: Generador de Secuencia Fibonacci Galáctica**\n\nComo matemático espacial de AstroCode, debes crear un generador de la secuencia de Fibonacci que simule los patrones de crecimiento de cristales energéticos encontrados en diferentes galaxias.\n\n**Contexto de la misión:**\nLos cristales energéticos descubiertos en la galaxia Andrómeda siguen un patrón de crecimiento basado en la secuencia de Fibonacci. Necesitas generar esta secuencia usando diferentes tipos de bucles para estudiar su comportamiento.\n\n**Objetivos:**\n- Implementa la secuencia de Fibonacci usando bucle for\n- Crea una versión con bucle while\n- Compara el rendimiento de ambas implementaciones\n- Genera los primeros 15 términos de la secuencia\n\n**Datos de los cristales:**\n- Secuencia inicial: 0, 1\n- Patrón: cada término = suma de los dos anteriores\n- Términos a generar: 15\n\n💎 ¡Estos cristales podrían ser la clave para viajes intergalácticos!',
    codigo_base = 'console.log("🌌 === GENERADOR DE SECUENCIA FIBONACCI GALÁCTICA ===");\n\nconst terminos = 15;\nconsole.log(`💎 Generando ${terminos} términos de cristales energéticos`);\n\n// Implementación con bucle FOR\nconsole.log("\n🔄 Método 1: Bucle FOR");\nlet fibonacciFor = [0, 1];\nconsole.log(`Cristal 0: ${fibonacciFor[0]} unidades`);\nconsole.log(`Cristal 1: ${fibonacciFor[1]} unidades`);\n\n// TODO: Implementar con bucle for\nfor (let i = 2; i < terminos; i++) {\n    // Calcular siguiente término de Fibonacci\n    let siguiente = // suma de los dos términos anteriores\n    fibonacciFor.push(siguiente);\n    console.log(`Cristal ${i}: ${siguiente} unidades`);\n}\n\n// Implementación con bucle WHILE\nconsole.log("\n🔄 Método 2: Bucle WHILE");\nlet fibonacciWhile = [0, 1];\nlet contador = 2;\n\nconsole.log(`Cristal 0: ${fibonacciWhile[0]} unidades`);\nconsole.log(`Cristal 1: ${fibonacciWhile[1]} unidades`);\n\n// TODO: Implementar con bucle while\nwhile (contador < terminos) {\n    // Implementar lógica similar\n    contador++;\n}\n\n// Comparación de resultados\nconsole.log("\n📊 Análisis de cristales:");\nconsole.log(`🔬 Secuencia FOR: [${fibonacciFor.join(", ")}]`);\nconsole.log(`🔬 Secuencia WHILE: [${fibonacciWhile.join(", ")}]`);\nconsole.log(`✅ Secuencias idénticas: ${JSON.stringify(fibonacciFor) === JSON.stringify(fibonacciWhile)}`);\n\nconst ultimoCristal = fibonacciFor[fibonacciFor.length - 1];\nconsole.log(`\n💎 Cristal más grande: ${ultimoCristal} unidades de energía`);',
    resultado_esperado = '🌌 === GENERADOR DE SECUENCIA FIBONACCI GALÁCTICA ===\n💎 Generando 15 términos de cristales energéticos\n\n🔄 Método 1: Bucle FOR\nCristal 0: 0 unidades\nCristal 1: 1 unidades\nCristal 2: 1 unidades\nCristal 3: 2 unidades\nCristal 4: 3 unidades\nCristal 5: 5 unidades\nCristal 6: 8 unidades\nCristal 7: 13 unidades\nCristal 8: 21 unidades\nCristal 9: 34 unidades\nCristal 10: 55 unidades\nCristal 11: 89 unidades\nCristal 12: 144 unidades\nCristal 13: 233 unidades\nCristal 14: 377 unidades\n\n🔄 Método 2: Bucle WHILE\nCristal 0: 0 unidades\nCristal 1: 1 unidades\nCristal 2: 1 unidades\nCristal 3: 2 unidades\nCristal 4: 3 unidades\nCristal 5: 5 unidades\nCristal 6: 8 unidades\nCristal 7: 13 unidades\nCristal 8: 21 unidades\nCristal 9: 34 unidades\nCristal 10: 55 unidades\nCristal 11: 89 unidades\nCristal 12: 144 unidades\nCristal 13: 233 unidades\nCristal 14: 377 unidades\n\n📊 Análisis de cristales:\n🔬 Secuencia FOR: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]\n🔬 Secuencia WHILE: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]\n✅ Secuencias idénticas: true\n\n💎 Cristal más grande: 377 unidades de energía'
WHERE categoria_id = (SELECT id FROM categorias WHERE nombre = 'Bucles') AND nivel_id = (SELECT id FROM niveles WHERE nombre = 'Intermedio');

-- Funciones - Intermedio
UPDATE tareas 
SET 
    descripcion = '🛸 **Misión: Sistema de Navegación Intergaláctica**\n\nEl sistema de navegación de tu nave ha detectado múltiples planetas en el sector. Como ingeniero de vuelo, debes crear un sistema de cálculo de distancias para planificar la ruta más eficiente.\n\n**Contexto de la misión:**\nTu nave se encuentra en las coordenadas (0, 0) del espacio. Has detectado varios planetas y necesitas calcular las distancias para determinar cuál visitar primero. El combustible es limitado, así que la eficiencia es crucial.\n\n**Objetivos:**\n- Crea una función que calcule la distancia entre dos puntos en el espacio\n- Implementa una función que determine si un planeta está dentro del rango de combustible\n- Desarrolla una función que encuentre el planeta más cercano\n\n**Fórmula de distancia:** √((x₂-x₁)² + (y₂-y₁)²)\n**Rango máximo:** 50 unidades espaciales\n\n¡La galaxia te espera, comandante! 🌌',
    codigo_base = 'console.log("🛸 === SISTEMA DE NAVEGACIÓN INTERGALÁCTICA ===");\n\n// Coordenadas de planetas detectados\nconst planetas = [\n    { nombre: "Kepler-442b", x: 30, y: 40 },\n    { nombre: "Proxima-b", x: 20, y: 15 },\n    { nombre: "TRAPPIST-1e", x: 60, y: 80 }\n];\n\nconst naveX = 0, naveY = 0;\nconst rangoMaximo = 50;\n\n// TODO: Implementa las funciones\nfunction calcularDistancia(x1, y1, x2, y2) {\n    // Implementar fórmula de distancia euclidiana\n    return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\nfunction estaEnRango(distancia, rango) {\n    // Verificar si está dentro del rango\n    return distancia <= rango;\n}\n\nfunction encontrarPlanetaMasCercano(planetas, naveX, naveY) {\n    // TODO: Encontrar el planeta más cercano\n    let planetaMasCercano = null;\n    let menorDistancia = Infinity;\n    \n    // Implementar lógica para encontrar el más cercano\n    \n    return planetaMasCercano;\n}\n\nconsole.log(`🚀 Posición de la nave: (${naveX}, ${naveY})`);\nconsole.log(`⛽ Rango máximo: ${rangoMaximo} unidades`);\nconsole.log("\n🪐 Análisis de planetas detectados:");\n\n// Análisis de planetas\nplanetas.forEach(planeta => {\n    const distancia = calcularDistancia(naveX, naveY, planeta.x, planeta.y);\n    const enRango = estaEnRango(distancia, rangoMaximo);\n    console.log(`${planeta.nombre}: ${distancia.toFixed(2)} unidades - ${enRango ? "✅ Alcanzable" : "❌ Fuera de rango"}`);\n});\n\nconst masCercano = encontrarPlanetaMasCercano(planetas, naveX, naveY);\nconsole.log(`\n🎯 Destino recomendado: ${masCercano.nombre}`);\nconsole.log(`📍 Coordenadas: (${masCercano.x}, ${masCercano.y})`);',
    resultado_esperado = '🛸 === SISTEMA DE NAVEGACIÓN INTERGALÁCTICA ===\n🚀 Posición de la nave: (0, 0)\n⛽ Rango máximo: 50 unidades\n\n🪐 Análisis de planetas detectados:\nKepler-442b: 50.00 unidades - ✅ Alcanzable\nProxima-b: 25.00 unidades - ✅ Alcanzable\nTRAPPIST-1e: 100.00 unidades - ❌ Fuera de rango\n\n🎯 Destino recomendado: Proxima-b\n📍 Coordenadas: (20, 15)'
WHERE categoria_id = (SELECT id FROM categorias WHERE nombre = 'Funciones') AND nivel_id = (SELECT id FROM niveles WHERE nombre = 'Intermedio');

-- Arrays y Listas - Intermedio
UPDATE tareas 
SET 
    descripcion = '🗂️ **Misión: Inventario de Recursos Espaciales**\n\nComo administrador de recursos de AstroCode, debes gestionar el inventario de suministros de múltiples estaciones espaciales. El sistema debe procesar, filtrar y organizar grandes cantidades de datos de recursos.\n\n**Contexto de la misión:**\nTienes datos de inventario de 5 estaciones espaciales diferentes. Necesitas crear un sistema que pueda filtrar recursos por tipo, calcular totales, encontrar escasez y generar reportes consolidados.\n\n**Objetivos:**\n- Manipula arrays multidimensionales de inventarios\n- Implementa filtros por categoría y cantidad\n- Calcula estadísticas de recursos\n- Identifica estaciones con escasez crítica\n\n**Tipos de recursos:**\n- Combustible, Oxígeno, Alimentos, Medicinas, Repuestos\n- Umbral crítico: < 100 unidades\n\n📊 ¡La supervivencia de las estaciones depende de tu gestión!',
    codigo_base = 'console.log("🗂️ === INVENTARIO DE RECURSOS ESPACIALES ===");\n\n// Inventarios de estaciones espaciales\nconst estaciones = [\n    {\n        nombre: "Estación Alpha",\n        recursos: [\n            { tipo: "Combustible", cantidad: 150 },\n            { tipo: "Oxígeno", cantidad: 80 },\n            { tipo: "Alimentos", cantidad: 200 },\n            { tipo: "Medicinas", cantidad: 50 },\n            { tipo: "Repuestos", cantidad: 120 }\n        ]\n    },\n    {\n        nombre: "Estación Beta",\n        recursos: [\n            { tipo: "Combustible", cantidad: 300 },\n            { tipo: "Oxígeno", cantidad: 250 },\n            { tipo: "Alimentos", cantidad: 180 },\n            { tipo: "Medicinas", cantidad: 90 },\n            { tipo: "Repuestos", cantidad: 160 }\n        ]\n    }\n];\n\nconst umbralCritico = 100;\n\n// TODO: Implementar funciones de gestión\nfunction obtenerRecursosPorTipo(estaciones, tipoRecurso) {\n    // Filtrar y obtener todos los recursos de un tipo específico\n    let recursos = [];\n    // Implementar lógica\n    return recursos;\n}\n\nfunction calcularTotalRecurso(estaciones, tipoRecurso) {\n    // Calcular total de un recurso en todas las estaciones\n    let total = 0;\n    // Implementar lógica\n    return total;\n}\n\nfunction identificarEscasez(estaciones, umbral) {\n    // Encontrar recursos por debajo del umbral crítico\n    let escasez = [];\n    // Implementar lógica\n    return escasez;\n}\n\nconsole.log("📊 Análisis de inventario:");\n\n// Análisis por tipo de recurso\nconst tiposRecursos = ["Combustible", "Oxígeno", "Alimentos", "Medicinas", "Repuestos"];\ntiposRecursos.forEach(tipo => {\n    const total = calcularTotalRecurso(estaciones, tipo);\n    console.log(`${tipo}: ${total} unidades totales`);\n});\n\n// Identificar escasez crítica\nconst recursosEscasos = identificarEscasez(estaciones, umbralCritico);\nconsole.log(`\n🚨 Recursos en escasez crítica: ${recursosEscasos.length}`);\nrecursosEscasos.forEach(item => {\n    console.log(`⚠️ ${item.estacion} - ${item.recurso}: ${item.cantidad} unidades`);\n});',
    resultado_esperado = '🗂️ === INVENTARIO DE RECURSOS ESPACIALES ===\n📊 Análisis de inventario:\nCombustible: 450 unidades totales\nOxígeno: 330 unidades totales\nAlimentos: 380 unidades totales\nMedicinas: 140 unidades totales\nRepuestos: 280 unidades totales\n\n🚨 Recursos en escasez crítica: 2\n⚠️ Estación Alpha - Oxígeno: 80 unidades\n⚠️ Estación Alpha - Medicinas: 50 unidades'
WHERE categoria_id = (SELECT id FROM categorias WHERE nombre = 'Arrays y Listas') AND nivel_id = (SELECT id FROM niveles WHERE nombre = 'Intermedio');

-- Objetos y Clases - Intermedio
UPDATE tareas 
SET 
    descripcion = '🚀 **Misión: Sistema de Gestión de Naves Espaciales**\n\nComo ingeniero jefe de AstroCode, debes diseñar un sistema orientado a objetos para gestionar la flota de naves espaciales. Cada nave tiene características únicas y debe poder realizar operaciones específicas.\n\n**Contexto de la misión:**\nLa flota de AstroCode está creciendo rápidamente. Necesitas un sistema que permita crear diferentes tipos de naves, gestionar sus recursos, y simular operaciones de vuelo de manera eficiente.\n\n**Objetivos:**\n- Crea una clase base "Nave" con propiedades y métodos comunes\n- Implementa clases derivadas para diferentes tipos de naves\n- Gestiona combustible, escudos y sistemas de navegación\n- Simula operaciones de vuelo y combate\n\n**Tipos de naves:**\n- Explorador: Rápido, poco armamento\n- Carguero: Lento, gran capacidad\n- Militar: Equilibrado, bien armado\n\n⚔️ ¡El futuro de la galaxia está en tus manos!',
    codigo_base = 'console.log("🚀 === SISTEMA DE GESTIÓN DE NAVES ESPACIALES ===");\n\n// TODO: Implementar clase base Nave\nclass Nave {\n    constructor(nombre, tipo, combustible, escudos, velocidad) {\n        this.nombre = nombre;\n        this.tipo = tipo;\n        this.combustible = combustible;\n        this.escudos = escudos;\n        this.velocidad = velocidad;\n        this.posicion = { x: 0, y: 0 };\n    }\n\n    // TODO: Implementar métodos\n    volar(distancia) {\n        // Calcular consumo de combustible y mover nave\n        const consumo = distancia * 0.1;\n        if (this.combustible >= consumo) {\n            this.combustible -= consumo;\n            console.log(`🛸 ${this.nombre} voló ${distancia} unidades. Combustible restante: ${this.combustible.toFixed(1)}`);\n            return true;\n        } else {\n            console.log(`⛽ ${this.nombre} no tiene suficiente combustible`);\n            return false;\n        }\n    }\n\n    recargarCombustible(cantidad) {\n        // Implementar recarga\n    }\n\n    mostrarEstado() {\n        // Mostrar información de la nave\n    }\n}\n\n// TODO: Implementar clases derivadas\nclass Explorador extends Nave {\n    constructor(nombre) {\n        super(nombre, "Explorador", 100, 50, 150);\n        this.sensores = true;\n    }\n\n    escanear() {\n        console.log(`🔍 ${this.nombre} está escaneando el área...`);\n        return "Planeta habitable detectado";\n    }\n}\n\nclass Carguero extends Nave {\n    constructor(nombre) {\n        super(nombre, "Carguero", 200, 30, 80);\n        this.carga = 0;\n        this.capacidadMaxima = 500;\n    }\n\n    cargar(cantidad) {\n        // Implementar sistema de carga\n    }\n}\n\n// Crear flota\nconst flota = [\n    new Explorador("Discovery"),\n    new Carguero("Titan"),\n    new Nave("Guardian", "Militar", 150, 100, 120)\n];\n\nconsole.log("🌌 Flota de AstroCode inicializada:");\nflota.forEach(nave => {\n    console.log(`${nave.tipo} ${nave.nombre} - Combustible: ${nave.combustible}, Velocidad: ${nave.velocidad}`);\n});\n\n// Simular operaciones\nconsole.log("\n⚡ Iniciando operaciones:");\nflota[0].volar(50);\nif (flota[0] instanceof Explorador) {\n    const resultado = flota[0].escanear();\n    console.log(`📡 Resultado del escaneo: ${resultado}`);\n}',
    resultado_esperado = '🚀 === SISTEMA DE GESTIÓN DE NAVES ESPACIALES ===\n🌌 Flota de AstroCode inicializada:\nExplorador Discovery - Combustible: 100, Velocidad: 150\nCarguero Titan - Combustible: 200, Velocidad: 80\nMilitar Guardian - Combustible: 150, Velocidad: 120\n\n⚡ Iniciando operaciones:\n🛸 Discovery voló 50 unidades. Combustible restante: 95.0\n🔍 Discovery está escaneando el área...\n📡 Resultado del escaneo: Planeta habitable detectado'
WHERE categoria_id = (SELECT id FROM categorias WHERE nombre = 'Objetos y Clases') AND nivel_id = (SELECT id FROM niveles WHERE nombre = 'Intermedio');

-- Algoritmos de Ordenamiento - Intermedio
UPDATE tareas 
SET 
    descripcion = '📈 **Misión: Clasificador de Señales Cósmicas**\n\nComo analista de datos de AstroCode, has recibido múltiples señales del espacio profundo. Debes implementar algoritmos de ordenamiento eficientes para clasificar estas señales por frecuencia y prioridad.\n\n**Contexto de la misión:**\nEl radiotelescopio de AstroCode ha captado cientos de señales misteriosas. Algunas podrían ser de civilizaciones extraterrestres. Tu tarea es ordenar estas señales para que el equipo científico pueda analizarlas en orden de importancia.\n\n**Objetivos:**\n- Implementa el algoritmo Bubble Sort para señales pequeñas\n- Desarrolla Quick Sort para conjuntos grandes\n- Compara el rendimiento de ambos algoritmos\n- Ordena por frecuencia y intensidad\n\n**Datos de señales:**\n- Frecuencia: 1.0 - 10.0 GHz\n- Intensidad: 1 - 100 (prioridad)\n- Origen: Coordenadas espaciales\n\n📡 ¡Podrías ser el primero en detectar vida extraterrestre!',
    codigo_base = 'console.log("📈 === CLASIFICADOR DE SEÑALES CÓSMICAS ===");\n\n// Señales captadas por el radiotelescopio\nconst senales = [\n    { id: "S001", frecuencia: 4.2, intensidad: 85, origen: "Alfa Centauri" },\n    { id: "S002", frecuencia: 1.7, intensidad: 45, origen: "Vega" },\n    { id: "S003", frecuencia: 8.1, intensidad: 92, origen: "Proxima" },\n    { id: "S004", frecuencia: 3.3, intensidad: 67, origen: "Sirius" },\n    { id: "S005", frecuencia: 6.8, intensidad: 78, origen: "Betelgeuse" },\n    { id: "S006", frecuencia: 2.1, intensidad: 34, origen: "Rigel" }\n];\n\nconsole.log("📡 Señales detectadas:");\nsenales.forEach(senal => {\n    console.log(`${senal.id}: ${senal.frecuencia} GHz, Intensidad: ${senal.intensidad}, Origen: ${senal.origen}`);\n});\n\n// TODO: Implementar Bubble Sort\nfunction bubbleSort(arr, criterio) {\n    let n = arr.length;\n    let intercambios = 0;\n    \n    for (let i = 0; i < n - 1; i++) {\n        for (let j = 0; j < n - i - 1; j++) {\n            // Implementar comparación según criterio\n            if (arr[j][criterio] > arr[j + 1][criterio]) {\n                // Intercambiar elementos\n                let temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n                intercambios++;\n            }\n        }\n    }\n    \n    console.log(`🔄 Bubble Sort completado con ${intercambios} intercambios`);\n    return arr;\n}\n\n// TODO: Implementar Quick Sort\nfunction quickSort(arr, criterio, inicio = 0, fin = arr.length - 1) {\n    if (inicio < fin) {\n        // Implementar partición y recursión\n        let pivote = partition(arr, criterio, inicio, fin);\n        quickSort(arr, criterio, inicio, pivote - 1);\n        quickSort(arr, criterio, pivote + 1, fin);\n    }\n    return arr;\n}\n\nfunction partition(arr, criterio, inicio, fin) {\n    // TODO: Implementar partición\n    let pivote = arr[fin][criterio];\n    let i = inicio - 1;\n    \n    for (let j = inicio; j < fin; j++) {\n        if (arr[j][criterio] <= pivote) {\n            i++;\n            [arr[i], arr[j]] = [arr[j], arr[i]];\n        }\n    }\n    \n    [arr[i + 1], arr[fin]] = [arr[fin], arr[i + 1]];\n    return i + 1;\n}\n\n// Pruebas de ordenamiento\nconsole.log("\n🔬 Ordenando por intensidad (Bubble Sort):");\nlet senalesBubble = [...senales];\nbubbleSort(senalesBubble, "intensidad");\nsenalesBubble.slice(0, 3).forEach(senal => {\n    console.log(`🌟 ${senal.id}: Intensidad ${senal.intensidad} - ${senal.origen}`);\n});\n\nconsole.log("\n⚡ Ordenando por frecuencia (Quick Sort):");\nlet senalesQuick = [...senales];\nquickSort(senalesQuick, "frecuencia");\nsenalesQuick.slice(0, 3).forEach(senal => {\n    console.log(`📻 ${senal.id}: ${senal.frecuencia} GHz - ${senal.origen}`);\n});',
    resultado_esperado = '📈 === CLASIFICADOR DE SEÑALES CÓSMICAS ===\n📡 Señales detectadas:\nS001: 4.2 GHz, Intensidad: 85, Origen: Alfa Centauri\nS002: 1.7 GHz, Intensidad: 45, Origen: Vega\nS003: 8.1 GHz, Intensidad: 92, Origen: Proxima\nS004: 3.3 GHz, Intensidad: 67, Origen: Sirius\nS005: 6.8 GHz, Intensidad: 78, Origen: Betelgeuse\nS006: 2.1 GHz, Intensidad: 34, Origen: Rigel\n\n🔬 Ordenando por intensidad (Bubble Sort):\n🔄 Bubble Sort completado con 8 intercambios\n🌟 S006: Intensidad 34 - Rigel\n🌟 S002: Intensidad 45 - Vega\n🌟 S004: Intensidad 67 - Sirius\n\n⚡ Ordenando por frecuencia (Quick Sort):\n📻 S002: 1.7 GHz - Vega\n📻 S006: 2.1 GHz - Rigel\n📻 S004: 3.3 GHz - Sirius'
WHERE categoria_id = (SELECT id FROM categorias WHERE nombre = 'Algoritmos de Ordenamiento') AND nivel_id = (SELECT id FROM niveles WHERE nombre = 'Intermedio');

-- Recursión - Intermedio
UPDATE tareas 
SET 
    descripcion = '🌀 **Misión: Explorador de Fractales Cósmicos**\n\nComo matemático espacial de AstroCode, has descubierto que las formaciones de asteroides en el cinturón de Kuiper siguen patrones fractales. Debes usar recursión para calcular y visualizar estos patrones complejos.\n\n**Contexto de la misión:**\nLos fractales cósmicos contienen información valiosa sobre la formación del sistema solar. Tu algoritmo recursivo debe calcular el factorial de coordenadas, generar secuencias de Fibonacci espaciales, y resolver el problema de las Torres de Hanoi para simular el movimiento de asteroides.\n\n**Objetivos:**\n- Implementa factorial recursivo para cálculos orbitales\n- Genera Fibonacci recursivo para patrones de asteroides\n- Resuelve Torres de Hanoi para simulación de movimientos\n- Calcula la profundidad máxima de recursión\n\n**Parámetros:**\n- Factorial: n = 8 (coordenadas orbitales)\n- Fibonacci: término 10 (patrón de asteroides)\n- Torres de Hanoi: 4 discos (asteroides)\n\n🔢 ¡Los secretos del cosmos están en los números!',
    codigo_base = 'console.log("🌀 === EXPLORADOR DE FRACTALES CÓSMICOS ===");\n\nlet contadorLlamadas = 0;\nlet profundidadMaxima = 0;\n\n// TODO: Implementar factorial recursivo\nfunction factorialCósmico(n, profundidad = 0) {\n    contadorLlamadas++;\n    profundidadMaxima = Math.max(profundidadMaxima, profundidad);\n    \n    console.log(`${\'  \'.repeat(profundidad)}🔢 Calculando factorial de ${n}`);\n    \n    // Caso base\n    if (n <= 1) {\n        console.log(`${\'  \'.repeat(profundidad)}✅ Caso base alcanzado: ${n}! = 1`);\n        return 1;\n    }\n    \n    // Llamada recursiva\n    const resultado = n * factorialCósmico(n - 1, profundidad + 1);\n    console.log(`${\'  \'.repeat(profundidad)}📊 ${n}! = ${resultado}`);\n    return resultado;\n}\n\n// TODO: Implementar Fibonacci recursivo\nfunction fibonacciCósmico(n, profundidad = 0) {\n    contadorLlamadas++;\n    profundidadMaxima = Math.max(profundidadMaxima, profundidad);\n    \n    console.log(`${\'  \'.repeat(profundidad)}🌌 Fibonacci cósmico de ${n}`);\n    \n    // Casos base\n    if (n <= 1) {\n        console.log(`${\'  \'.repeat(profundidad)}⭐ Caso base: F(${n}) = ${n}`);\n        return n;\n    }\n    \n    // Llamadas recursivas\n    const resultado = fibonacciCósmico(n - 1, profundidad + 1) + fibonacciCósmico(n - 2, profundidad + 1);\n    console.log(`${\'  \'.repeat(profundidad)}💫 F(${n}) = ${resultado}`);\n    return resultado;\n}\n\n// TODO: Implementar Torres de Hanoi\nfunction torresDeHanoi(n, origen, destino, auxiliar, profundidad = 0) {\n    contadorLlamadas++;\n    profundidadMaxima = Math.max(profundidadMaxima, profundidad);\n    \n    if (n === 1) {\n        console.log(`${\'  \'.repeat(profundidad)}🚀 Mover asteroide 1 de ${origen} a ${destino}`);\n        return;\n    }\n    \n    // Mover n-1 discos al auxiliar\n    torresDeHanoi(n - 1, origen, auxiliar, destino, profundidad + 1);\n    \n    // Mover el disco más grande\n    console.log(`${\'  \'.repeat(profundidad)}🌍 Mover asteroide ${n} de ${origen} a ${destino}`);\n    \n    // Mover n-1 discos del auxiliar al destino\n    torresDeHanoi(n - 1, auxiliar, destino, origen, profundidad + 1);\n}\n\n// Ejecutar cálculos cósmicos\nconsole.log("🧮 Calculando factorial cósmico de 5:");\ncontadorLlamadas = 0;\nprofundidadMaxima = 0;\nconst factorial = factorialCósmico(5);\nconsole.log(`\n📊 Resultado: 5! = ${factorial}`);\nconsole.log(`📈 Llamadas recursivas: ${contadorLlamadas}`);\nconsole.log(`🏔️ Profundidad máxima: ${profundidadMaxima}`);\n\nconsole.log("\n🌌 Calculando Fibonacci cósmico del término 6:");\ncontadorLlamadas = 0;\nprofundidadMaxima = 0;\nconst fibonacci = fibonacciCósmico(6);\nconsole.log(`\n📊 Resultado: F(6) = ${fibonacci}`);\nconsole.log(`📈 Llamadas recursivas: ${contadorLlamadas}`);\n\nconsole.log("\n🏗️ Resolviendo Torres de Hanoi con 3 asteroides:");\ncontadorLlamadas = 0;\ntorresDeHanoi(3, "Sector A", "Sector C", "Sector B");\nconsole.log(`\n📊 Movimientos totales: ${Math.pow(2, 3) - 1}`);',
    resultado_esperado = '🌀 === EXPLORADOR DE FRACTALES CÓSMICOS ===\n🧮 Calculando factorial cósmico de 5:\n🔢 Calculando factorial de 5\n  🔢 Calculando factorial de 4\n    🔢 Calculando factorial de 3\n      🔢 Calculando factorial de 2\n        🔢 Calculando factorial de 1\n        ✅ Caso base alcanzado: 1! = 1\n      📊 2! = 2\n    📊 3! = 6\n  📊 4! = 24\n📊 5! = 120\n\n📊 Resultado: 5! = 120\n📈 Llamadas recursivas: 5\n🏔️ Profundidad máxima: 4\n\n🌌 Calculando Fibonacci cósmico del término 6:\n🌌 Fibonacci cósmico de 6\n  🌌 Fibonacci cósmico de 5\n    🌌 Fibonacci cósmico de 4\n      🌌 Fibonacci cósmico de 3\n        🌌 Fibonacci cósmico de 2\n          🌌 Fibonacci cósmico de 1\n          ⭐ Caso base: F(1) = 1\n          🌌 Fibonacci cósmico de 0\n          ⭐ Caso base: F(0) = 0\n        💫 F(2) = 1\n        🌌 Fibonacci cósmico de 1\n        ⭐ Caso base: F(1) = 1\n      💫 F(3) = 2\n      🌌 Fibonacci cósmico de 2\n        🌌 Fibonacci cósmico de 1\n        ⭐ Caso base: F(1) = 1\n        🌌 Fibonacci cósmico de 0\n        ⭐ Caso base: F(0) = 0\n      💫 F(2) = 1\n    💫 F(4) = 3\n    🌌 Fibonacci cósmico de 3\n      🌌 Fibonacci cósmico de 2\n        🌌 Fibonacci cósmico de 1\n        ⭐ Caso base: F(1) = 1\n        🌌 Fibonacci cósmico de 0\n        ⭐ Caso base: F(0) = 0\n      💫 F(2) = 1\n      🌌 Fibonacci cósmico de 1\n      ⭐ Caso base: F(1) = 1\n    💫 F(3) = 2\n  💫 F(5) = 5\n  🌌 Fibonacci cósmico de 4\n    🌌 Fibonacci cósmico de 3\n      🌌 Fibonacci cósmico de 2\n        🌌 Fibonacci cósmico de 1\n        ⭐ Caso base: F(1) = 1\n        🌌 Fibonacci cósmico de 0\n        ⭐ Caso base: F(0) = 0\n      💫 F(2) = 1\n      🌌 Fibonacci cósmico de 1\n      ⭐ Caso base: F(1) = 1\n    💫 F(3) = 2\n    🌌 Fibonacci cósmico de 2\n      🌌 Fibonacci cósmico de 1\n      ⭐ Caso base: F(1) = 1\n      🌌 Fibonacci cósmico de 0\n      ⭐ Caso base: F(0) = 0\n    💫 F(2) = 1\n  💫 F(4) = 3\n💫 F(6) = 8\n\n📊 Resultado: F(6) = 8\n📈 Llamadas recursivas: 25\n\n🏗️ Resolviendo Torres de Hanoi con 3 asteroides:\n🚀 Mover asteroide 1 de Sector A a Sector C\n🌍 Mover asteroide 2 de Sector A a Sector B\n🚀 Mover asteroide 1 de Sector C a Sector B\n🌍 Mover asteroide 3 de Sector A a Sector C\n🚀 Mover asteroide 1 de Sector B a Sector A\n🌍 Mover asteroide 2 de Sector B a Sector C\n🚀 Mover asteroide 1 de Sector A a Sector C\n\n📊 Movimientos totales: 7'
WHERE categoria_id = (SELECT id FROM categorias WHERE nombre = 'Recursión') AND nivel_id = (SELECT id FROM niveles WHERE nombre = 'Intermedio');

-- Estructuras de Datos - Intermedio
UPDATE tareas 
SET 
    descripcion = '🗄️ **Misión: Centro de Comando de Comunicaciones**\n\nComo ingeniero de comunicaciones de AstroCode, debes implementar un sistema avanzado de gestión de mensajes usando estructuras de datos eficientes. El centro debe manejar colas de prioridad, pilas de historial y mapas de contactos.\n\n**Contexto de la misión:**\nEl centro de comando recibe miles de mensajes diarios de diferentes naves y estaciones. Necesitas un sistema que priorice mensajes de emergencia, mantenga historial de comunicaciones y gestione contactos de manera eficiente.\n\n**Objetivos:**\n- Implementa una cola de prioridad para mensajes\n- Crea una pila para historial de comandos\n- Desarrolla un mapa hash para contactos\n- Gestiona diferentes tipos de mensajes y prioridades\n\n**Tipos de mensajes:**\n- Emergencia (Prioridad 1), Operacional (Prioridad 2), Informativo (Prioridad 3)\n- Cada mensaje tiene: ID, remitente, contenido, timestamp\n\n📡 ¡La comunicación eficiente salva vidas en el espacio!',
    codigo_base = 'console.log("🗄️ === CENTRO DE COMANDO DE COMUNICACIONES ===");\n\n// TODO: Implementar Cola de Prioridad\nclass ColaPrioridad {\n    constructor() {\n        this.elementos = [];\n    }\n\n    encolar(elemento, prioridad) {\n        const item = { elemento, prioridad };\n        let agregado = false;\n\n        // Insertar según prioridad (1 = mayor prioridad)\n        for (let i = 0; i < this.elementos.length; i++) {\n            if (item.prioridad < this.elementos[i].prioridad) {\n                this.elementos.splice(i, 0, item);\n                agregado = true;\n                break;\n            }\n        }\n\n        if (!agregado) {\n            this.elementos.push(item);\n        }\n\n        console.log(`📥 Mensaje encolado: ${elemento.id} (Prioridad ${prioridad})`);\n    }\n\n    desencolar() {\n        if (this.elementos.length === 0) {\n            console.log("📭 Cola vacía");\n            return null;\n        }\n        const item = this.elementos.shift();\n        console.log(`📤 Procesando mensaje: ${item.elemento.id}`);\n        return item.elemento;\n    }\n\n    mostrarCola() {\n        console.log("📋 Estado actual de la cola:");\n        this.elementos.forEach((item, index) => {\n            console.log(`  ${index + 1}. ${item.elemento.id} - ${item.elemento.tipo} (P${item.prioridad})`);\n        });\n    }\n}\n\n// TODO: Implementar Pila para historial\nclass PilaHistorial {\n    constructor() {\n        this.comandos = [];\n    }\n\n    apilar(comando) {\n        this.comandos.push({\n            comando: comando,\n            timestamp: new Date().toLocaleTimeString()\n        });\n        console.log(`📚 Comando guardado: ${comando}`);\n    }\n\n    desapilar() {\n        if (this.comandos.length === 0) {\n            console.log("📖 Historial vacío");\n            return null;\n        }\n        const ultimo = this.comandos.pop();\n        console.log(`⏪ Deshaciendo: ${ultimo.comando}`);\n        return ultimo;\n    }\n\n    mostrarHistorial() {\n        console.log("📜 Historial de comandos:");\n        this.comandos.slice(-5).forEach((item, index) => {\n            console.log(`  ${this.comandos.length - 5 + index + 1}. ${item.comando} (${item.timestamp})`);\n        });\n    }\n}\n\n// TODO: Implementar Mapa de contactos\nclass MapaContactos {\n    constructor() {\n        this.contactos = new Map();\n    }\n\n    agregar(id, nombre, sector, rango) {\n        this.contactos.set(id, { nombre, sector, rango });\n        console.log(`👤 Contacto agregado: ${nombre} (${id})`);\n    }\n\n    buscar(id) {\n        const contacto = this.contactos.get(id);\n        if (contacto) {\n            console.log(`🔍 Encontrado: ${contacto.nombre} - ${contacto.sector} (${contacto.rango})`);\n            return contacto;\n        } else {\n            console.log(`❌ Contacto ${id} no encontrado`);\n            return null;\n        }\n    }\n\n    listarPorSector(sector) {\n        console.log(`🌌 Contactos en ${sector}:`);\n        for (let [id, contacto] of this.contactos) {\n            if (contacto.sector === sector) {\n                console.log(`  ${contacto.nombre} (${id}) - ${contacto.rango}`);\n            }\n        }\n    }\n}\n\n// Inicializar sistemas\nconst colaMensajes = new ColaPrioridad();\nconst historial = new PilaHistorial();\nconst contactos = new MapaContactos();\n\n// Agregar contactos\ncontactos.agregar("CMD001", "Capitán Rodriguez", "Sector Alpha", "Comandante");\ncontactos.agregar("ENG002", "Ingeniera Chen", "Sector Beta", "Ingeniero Jefe");\ncontactos.agregar("SCI003", "Dr. Patel", "Sector Alpha", "Científico");\n\n// Simular mensajes\nconst mensajes = [\n    { id: "MSG001", remitente: "CMD001", tipo: "Informativo", contenido: "Reporte de estado" },\n    { id: "MSG002", remitente: "ENG002", tipo: "Emergencia", contenido: "Falla en reactor" },\n    { id: "MSG003", remitente: "SCI003", tipo: "Operacional", contenido: "Datos de escaneo" }\n];\n\nconsole.log("\n📡 Procesando mensajes:");\nmensajes.forEach(mensaje => {\n    let prioridad = mensaje.tipo === "Emergencia" ? 1 : mensaje.tipo === "Operacional" ? 2 : 3;\n    colaMensajes.encolar(mensaje, prioridad);\n});\n\ncolaMensajes.mostrarCola();\n\nconsole.log("\n⚡ Procesando mensajes por prioridad:");\nwhile (colaMensajes.elementos.length > 0) {\n    const mensaje = colaMensajes.desencolar();\n    historial.apilar(`Procesado ${mensaje.id} de ${mensaje.remitente}`);\n}\n\nconsole.log("\n📚 Historial reciente:");\nhistorial.mostrarHistorial();\n\nconsole.log("\n🔍 Búsqueda de contactos:");\ncontactos.buscar("ENG002");\ncontactos.listarPorSector("Sector Alpha");',
    resultado_esperado = '🗄️ === CENTRO DE COMANDO DE COMUNICACIONES ===\n👤 Contacto agregado: Capitán Rodriguez (CMD001)\n👤 Contacto agregado: Ingeniera Chen (ENG002)\n👤 Contacto agregado: Dr. Patel (SCI003)\n\n📡 Procesando mensajes:\n📥 Mensaje encolado: MSG001 (Prioridad 3)\n📥 Mensaje encolado: MSG002 (Prioridad 1)\n📥 Mensaje encolado: MSG003 (Prioridad 2)\n📋 Estado actual de la cola:\n  1. MSG002 - Emergencia (P1)\n  2. MSG003 - Operacional (P2)\n  3. MSG001 - Informativo (P3)\n\n⚡ Procesando mensajes por prioridad:\n📤 Procesando mensaje: MSG002\n📚 Comando guardado: Procesado MSG002 de ENG002\n📤 Procesando mensaje: MSG003\n📚 Comando guardado: Procesado MSG003 de SCI003\n📤 Procesando mensaje: MSG001\n📚 Comando guardado: Procesado MSG001 de CMD001\n\n📚 Historial reciente:\n📜 Historial de comandos:\n  1. Procesado MSG002 de ENG002 (10:30:15)\n  2. Procesado MSG003 de SCI003 (10:30:15)\n  3. Procesado MSG001 de CMD001 (10:30:15)\n\n🔍 Búsqueda de contactos:\n🔍 Encontrado: Ingeniera Chen - Sector Beta (Ingeniero Jefe)\n🌌 Contactos en Sector Alpha:\n  Capitán Rodriguez (CMD001) - Comandante\n  Dr. Patel (SCI003) - Científico'
WHERE categoria_id = (SELECT id FROM categorias WHERE nombre = 'Estructuras de Datos') AND nivel_id = (SELECT id FROM niveles WHERE nombre = 'Intermedio');

-- Consulta para ver ejercicios con código base y resultado esperado
SELECT 
    t.id,
    c.nombre as categoria,
    n.nombre as nivel,
    LEFT(t.descripcion, 100) as descripcion_preview,
    CASE 
        WHEN t.codigo_base IS NOT NULL THEN 'Sí'
        ELSE 'No'
    END as tiene_codigo_base,
    CASE 
        WHEN t.resultado_esperado IS NOT NULL THEN 'Sí'
        ELSE 'No'
    END as tiene_resultado_esperado
FROM tareas t
JOIN categorias c ON t.categoria_id = c.id
JOIN niveles n ON t.nivel_id = n.id
ORDER BY c.nombre, n.nombre;

-- Estadísticas de ejercicios con contenido interactivo
SELECT 
    'Con código base' as tipo,
    COUNT(*) as cantidad
FROM tareas
WHERE codigo_base IS NOT NULL
UNION ALL
SELECT 
    'Con resultado esperado' as tipo,
    COUNT(*) as cantidad
FROM tareas
WHERE resultado_esperado IS NOT NULL
UNION ALL
SELECT 
    'Completos (ambos campos)' as tipo,
    COUNT(*) as cantidad
FROM tareas
WHERE codigo_base IS NOT NULL AND resultado_esperado IS NOT NULL;